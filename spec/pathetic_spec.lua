local path = require("pathetic")

describe("Pathetic HTTP path parser", function()
	describe("#escape", function()
		it("returns nil and error message if string is nil", function()
			local str, err = path:unescape()
			assert.is_nil(str)
			assert.is_string(err)
			assert.are_same("no string given", err)
		end)

		it("unescapes percent encoded chars", function()
			local str = path:escape("hello world/goodbye!")
			assert.are_same("hello%20world%2Fgoodbye%21", str)
		end)

		it("ignores invalid sequences", function()
			local str = path:escape("hello%2Gworld%9A")
			assert.are_same("hello%2Gworld%9A", str)
		end)

		it("escapes RFC3986 reserve chars and whitespace", function()
			local str = path:escape(":/?#[]@!$&'()*+,;= \t\r\n")
			assert.are_same("%3A%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%20%09%0D%0A", str)
		end)
	end)

	describe("#unescape", function()
		it("returns nil and error message if string is nil", function()
			local str, err = path:unescape()
			assert.is_nil(str)
			assert.is_string(err)
			assert.are_same("no string given", err)
		end)

		it("unescapes percent encoded chars", function()
			local str = path:unescape("hello%20world%2Fgoodbye%21")
			assert.are_same("hello world/goodbye!", str)
		end)

		it("ignores invalid sequences", function()
			local str = path:unescape("hello%2Gworld%9A")
			assert.are_same("hello%2Gworld%9A", str)
		end)
	end)

	describe("#parse_query", function()
		it("returns a table", function()
			assert.is_table(path:parse_query("day=monday"))
		end)

		it("returns nil and error message if query is nil", function()
			local query, err = path:parse_query()
			assert.is_nil(query)
			assert.is_string(err)
			assert.are_same("no query given", err)
		end)

		it("returns nil and error message if query is malformed", function()
			local query, err = path:parse_query("hel%lo=world")
			assert.is_nil(query)
			assert.is_string(err)
			assert.are_same("query string malformed", err)
		end)

		it("returns unescaped keys and values", function()
			local query = path:parse_query("he%2Fllo=wo%20rld")
			assert.are_same("wo rld", query["he/llo"])
		end)

		it("gathers keys with multiple different values into subtables", function()
			local query = path:parse_query("hello=world&hello=lua")
			assert.is_table(query)
			assert.are_same({ hello = { "world", "lua" } }, query)
		end)

		it("assigned empty string to keys without values", function()
			local query = path:parse_query("hello")
			assert.are_same({ hello = "" }, query)
			query = path:parse_query("hello=world&day")
			assert.are_same({ hello = "world", day = "" }, query)
		end)

		it("returns empty table if empty string", function()
			local query = path:parse_query("")
			assert.are_same({}, query)
		end)
	end)

	describe("#parse", function()
		it("returns a table", function()
			assert.is_table(path:parse("/hello/world"))
		end)

		it("returns nil and error message if path is nil", function()
			local match, err = path:parse()
			assert.is_nil(match)
			assert.is_string(err)
			assert.are_same("no path given", err)
		end)

		it("returns nil and error message if path is malformed", function()
		local match, err = path:parse("=_=")
			assert.is_nil(match)
			assert.is_string(err)
			assert.are_same("path is malformed", err)
		end)

		it("produces the raw path", function()
			local match = path:parse("/")
			assert.are_same("/", match.raw_path)
			match = path:parse("/hello")
			assert.are_same("/hello", match.raw_path)
			match = path:parse("/hello/world")
			assert.are_same("/hello/world", match.raw_path)
			match = path:parse("/hello/world?day=monday")
			assert.are_same("/hello/world", match.raw_path)
			match = path:parse("/hello/world?day=monday#main")
			assert.are_same("/hello/world", match.raw_path)
		end)

		it("produces the raw query string", function()
			local match = path:parse("/")
			assert.is_nil(match.raw_query)
			match = path:parse("/hello/world?")
			assert.are_same("", match.raw_query)
			match = path:parse("/hello/world?day=monday")
			assert.are_same("day=monday", match.raw_query)
			match = path:parse("/hello/world?day=manic%20monday#main")
			assert.are_same("day=manic%20monday", match.raw_query)
		end)

		it("produces the raw fragment string", function()
			local match = path:parse("/")
			assert.is_nil(match.raw_fragment)
			match = path:parse("/hello/world#")
			assert.are_same("", match.raw_fragment)
			match = path:parse("/hello/world#main")
			assert.are_same("main", match.raw_fragment)
			match = path:parse("/hello/world?day=manic%20monday#main%21")
			assert.are_same("main%21", match.raw_fragment)
		end)

		it("produces the unsecaped path", function()
			local match = path:parse("/")
			assert.are_same("/", match.path)
			match = path:parse("/hello")
			assert.are_same("/hello", match.path)
			match = path:parse("/hello%20world")
			assert.are_same("/hello world", match.path)
			match = path:parse("/hello%20world%21?day=monday")
			assert.are_same("/hello world!", match.path)
			match = path:parse("/hello%20world%21?day=monday#main")
			assert.are_same("/hello world!", match.path)
		end)

		it("produces the parsed query", function()
			local match = path:parse("/")
			assert.is_nil(match.query)
			match = path:parse("/hello/world?")
			assert.is_table(match.query)
			match = path:parse("/hello/world?day=monday")
			assert.are_same("monday", match.query.day)
			match = path:parse("/hello/world?day=manic%20monday#main")
			assert.are_same("manic monday", match.query.day)
			match = path:parse("/hello/world?day=manic%20monday&week%3F=34#main")
			assert.are_same("manic monday", match.query.day)
			assert.are_same("34", match.query["week?"])
			match = path:parse("/hello/world?day")
			assert.are_same("", match.query.day)
			match = path:parse("/hello/world?hello=world&hello=lua")
			assert.is_table(match.query.hello)
			assert.are_same({ hello = { "world", "lua" } }, match.query)
		end)

		it("produces the unescaped fragment string", function()
			local match = path:parse("/")
			assert.is_nil(match.fragment)
			match = path:parse("/hello/world#")
			assert.are_same("", match.fragment)
			match = path:parse("/hello/world#main")
			assert.are_same("main", match.fragment)
			match = path:parse("/hello/world?day=manic%20monday#main%21")
			assert.are_same("main!", match.fragment)
		end)
	end)

	describe("#get_raw_path", function()
		it("returns a string", function()
			local raw_path = path:get_raw_path("/")
			assert.is_string(raw_path)
		end)

		it("returns nil and error message if path is nil", function()
			local raw_path, err = path:parse()
			assert.is_nil(raw_path)
			assert.is_string(err)
			assert.are_same("no path given", err)
		end)

		it("returns nil and error if path is malformed", function()
			local raw_path, err = path:get_raw_path("=_=")
			assert.is_nil(raw_path)
			assert.is_string(err)
			assert.are_same("path is malformed", err)
		end)

		it("returns the path part of a string", function()
			local raw_path = path:get_raw_path("/hello")
			assert.are_same("/hello", raw_path)
			raw_path = path:get_raw_path("/hello/world?day=monday")
			assert.are_same("/hello/world", raw_path)
			raw_path = path:get_raw_path("/hello?day=monday#main")
			assert.are_same("/hello", raw_path)
		end)

		it("returns path without unescaping reserved chars", function()
			local raw_path = path:get_raw_path("/hello%2Fworld")
			assert.are_same("/hello%2Fworld", raw_path)
		end)
	end)

	describe("#get_path", function()
		it("returns a string", function()
			local unescaped_path = path:get_path("/")
			assert.is_string(unescaped_path)
		end)

		it("returns nil and error message if path is nil", function()
			local unescaped_path, err = path:parse()
			assert.is_nil(unescaped_path)
			assert.is_string(err)
			assert.are_same("no path given", err)
		end)

		it("returns nil and error if path is malformed", function()
			local unescaped_path, err = path:get_path("=_=")
			assert.is_nil(unescaped_path)
			assert.is_string(err)
			assert.are_same("path is malformed", err)
		end)

		it("returns the path part of a string unescaped", function()
			local unescaped_path = path:get_path("/hello")
			assert.are_same("/hello", unescaped_path)
			unescaped_path = path:get_path("/hello/world?day=monday")
			assert.are_same("/hello/world", unescaped_path)
			unescaped_path = path:get_path("/hello?day=monday#main")
			assert.are_same("/hello", unescaped_path)
			unescaped_path = path:get_path("/hello%2Aworld")
			assert.are_same("/hello*world", unescaped_path)
		end)
	end)

	describe("#get_raw_query", function()
		it("returns a string", function()
			local raw_query = path:get_raw_query("/?hello=world")
			assert.is_string(raw_query)
		end)

		it("returns nil and error message if path is nil", function()
			local raw_query, err = path:parse()
			assert.is_nil(raw_query)
			assert.is_string(err)
			assert.are_same("no path given", err)
		end)

		it("returns nil and error if path is malformed", function()
			local raw_query, err = path:get_raw_query("=_=")
			assert.is_nil(raw_query)
			assert.is_string(err)
			assert.are_same("path is malformed", err)
		end)

		it("returns the query part of path without escaping", function()
			local raw_query = path:get_raw_query("/hello")
			assert.is_nil(raw_query)
			raw_query = path:get_raw_query("/hello/world?")
			assert.are_same("", raw_query)
			raw_query = path:get_raw_query("/hello?day=monday")
			assert.are_same("day=monday", raw_query)
			raw_query = path:get_raw_query("/hello?day=monday&week=34#main")
			assert.are_same("day=monday&week=34", raw_query)
		end)
	end)

	describe("#get_query", function()
		it("returns a table", function()
			local parsed_query = path:get_query("/?hello=world")
			assert.is_table(parsed_query)
		end)

		it("returns nil and error message if path is nil", function()
			local parsed_query, err = path:parse()
			assert.is_nil(parsed_query)
			assert.is_string(err)
			assert.are_same("no path given", err)
		end)

		it("returns nil and error if path is malformed", function()
			local parsed_query, err = path:get_query("=_=")
			assert.is_nil(parsed_query)
			assert.is_string(err)
			assert.are_same("path is malformed", err)
		end)

		it("returns the query keys and values, unescaped", function()
			local parsed_query = path:get_query("/hello?day=monday")
			assert.are_same({ day = "monday" }, parsed_query)
			parsed_query = path:get_query("/hello/world?day=monday&week=34")
			assert.are_same({ day = "monday", week = "34" }, parsed_query)
			parsed_query = path:get_query("/hello?day=monday&week")
			assert.are_same({ day = "monday", week = "" }, parsed_query)
			parsed_query = path:get_query("/hello?hello%20world=hola%2Flua")
			assert.are_same({ ["hello world"] = "hola/lua" }, parsed_query)
		end)

		it("gathers keys with multiple different values into subtables", function()
			local parsed_query = path:get_query("/?hello=world&hello=lua")
			assert.is_table(parsed_query.hello)
			assert.are_same({ hello = { "world", "lua" } }, parsed_query)
		end)
	end)

	describe("#get_raw_fragment", function()
		it("returns a string", function()
			local raw_fragment = path:get_raw_fragment("/#main")
			assert.is_string(raw_fragment)
		end)

		it("returns nil and error message if path is nil", function()
			local raw_fragment, err = path:parse()
			assert.is_nil(raw_fragment)
			assert.is_string(err)
			assert.are_same("no path given", err)
		end)

		it("returns nil and error if path is malformed", function()
			local raw_fragment, err = path:get_raw_fragment("=_=")
			assert.is_nil(raw_fragment)
			assert.is_string(err)
			assert.are_same("path is malformed", err)
		end)

		it("returns the fragment without unescaping", function()
			local raw_fragment = path:get_raw_fragment("/hello#main")
			assert.are_same("main", raw_fragment)
			raw_fragment = path:get_raw_fragment("/hello/world?day=monday#main")
			assert.are_same("main", raw_fragment)
			raw_fragment = path:get_raw_fragment("/hello?day=monday#main%2Fsqueeze")
			assert.are_same("main%2Fsqueeze", raw_fragment)
		end)
	end)

	describe("#get_fragment", function()
		it("returns a string", function()
			local unescaped_fragment = path:get_fragment("/#main")
			assert.is_string(unescaped_fragment)
		end)

		it("returns nil and error message if path is nil", function()
			local unescaped_fragment, err = path:parse()
			assert.is_nil(unescaped_fragment)
			assert.is_string(err)
			assert.are_same("no path given", err)
		end)

		it("returns nil and error if path is malformed", function()
			local unescaped_fragment, err = path:get_fragment("=_=")
			assert.is_nil(unescaped_fragment)
			assert.is_string(err)
			assert.are_same("path is malformed", err)
		end)

		it("returns the fragment unescaped", function()
			local unescaped_fragment = path:get_fragment("/hello#main")
			assert.are_same("main", unescaped_fragment)
			unescaped_fragment = path:get_fragment("/hello/world?day=monday#main")
			assert.are_same("main", unescaped_fragment)
			unescaped_fragment = path:get_fragment("/hello?day=monday#main")
			assert.are_same("main", unescaped_fragment)
			unescaped_fragment = path:get_fragment("/hello?day=monday#main%2Fsqueeze")
			assert.are_same("main/squeeze", unescaped_fragment)
		end)
	end)
end)
